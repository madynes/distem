#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
# hack to allow running this script without installing the debian package
$:.unshift File.join(File.dirname(__FILE__), '..', 'debian/distem/usr/lib/ruby/vendor_ruby/1.8/x86_64-linux')

require 'distem'
require 'optparse'
require 'pp'

USAGE="Usage: #{$0} [options]"

ERR_NONE=0
ERR_HOST=1
ERR_VNODE=2
ERR_VIFACE=3
ERR_VNETWORK=4

def errorcheck(errid,optvar,msg="")
  unless optvar
    case errid
      when ERR_HOST
        errmsg="You have to specify the host (option --host)"
      when ERR_VNODE
        errmsg="You have to specify the vnode (option --vnode)"
      when ERR_VIFACE
        errmsg="You have to specify the viface (option --viface)"
      when ERR_VNETWORK
        errmsg="You have to specify the vnetwork (option --vnetwork)"
      else
	errmsg = msg
    end
    puts errmsg
    exit
  end
end

options = {}

options['f_pnode_init'] = false
options['f_pnodes_quit'] = false
options['f_vnode_create'] = false
options['f_viface_create'] = false
options['f_vnetwork_create'] = false
options['f_vplatform_save'] = false
options['f_vplatform_load'] = false

options['daemon_addr'] = 'localhost'
options['daemon_port'] = 4567
options['pnode_addr'] = false
options['vnode_name'] = false
options['vnode_image'] = false
options['viface_name'] = false
options['vnetwork_name'] = false
options['vnetwork_address'] = false
options['vplatform_format'] = false
options['vplatform_file'] = false


optparse = OptionParser.new(USAGE) do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  opts.on( '-p', '--port NUMBER', \
    'The port that the daemon is listening on [default: 4567]' ) do |p|
    options['daemon_port'] = p
  end
  opts.on( '-H', '--host HOSTNAME', \
    'The HOSTNAME of the physical node that host virtual ones' ) do |h|
    options['pnode_addr'] = h
  end
  opts.on( '-d', '--daemon ADDRESS', \
    'The address of the daemon [default: localhost]' ) do |h|
    options['daemon_addr'] = h
  end
  opts.on( '-n', '--vnode VNODE', \
    'The name of the Virtual Node' ) do |n|
    options['vnode_name'] = n
  end
  opts.on( '-I', '--viface VIFACE', \
    'The name of the Virtual Interface' ) do |i|
    options['viface_name'] = i
  end
  opts.on( '-N', '--vnetwork VNETWORK', \
    'The name of the Virtual Network' ) do |n|
    options['vnetwork_name'] = n
  end
  opts.on( '-i', '--init-pnode HOSTNAME', \
    'Initialize the physical node (start daemons, ...)' ) do |h|
    options['f_pnode_init'] = true
    options['pnode_addr'] = h
  end
  opts.on( '-c', '--create-vnode NAME,IMAGE_FILE', Array,\
    'Create the Virtual Node <NAME> deploying <IMAGE_FILE>' ) \
    do |array|
    options['f_vnode_create'] = true
    options['vnode_name'] = array[0]
    options['vnode_image'] = array[1]
  end
  opts.on( '-f', '--create-viface NAME', \
    'Create the virtual interface <NAME> on the Virtual Node' ) \
    do |i|
    options['f_viface_create'] = true
    options['viface_name'] = i
  end
  opts.on( '-C', '--create-vnetwork NAME,ADDRESS', Array,\
    'Create the VNetwork NAME with the ADDRESS (ip/mask or ip/prefix)' ) \
    do |array|
    options['f_vnetwork_create'] = true
    options['vnetwork_name'] = array[0]
    options['vnetwork_address'] = array[1]
  end
  opts.on( '-s', '--save-config FORMAT,FILE', Array,\
    'Save the vplatform in FILE using FORMAT (avaliable formats: JSON,XML)' ) \
    do |array|
    options['f_vplatform_save'] = true
    options['vplatform_format'] = array[0]
    options['vplatform_file'] = array[1]
  end
  opts.on( '-l', '--load-config FORMAT,FILE', Array,\
    'Load a vplatform from a FILE in FORMAT (avaliable formats: JSON,XML,SIMGRID)' ) \
    do |array|
    options['f_vplatform_load'] = true
    options['vplatform_format'] = array[0]
    options['vplatform_file'] = array[1]
  end
  opts.on( '-q', '--quit', 'Close the application' ) do
    options['f_pnodes_quit'] = true
  end
end
optparse.parse!

unless ARGV.length == 0
  puts USAGE
  exit
end


cl=false

if (options['f_pnode_init'])
  errorcheck(ERR_HOST,options['pnode_addr'])

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.pnode_init(options['pnode_addr'])
end

if (options['f_pnodes_quit'])
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.pnodes_quit()
end

if (options['f_vnode_create'])
  props = {}
  props['image'] = options['vnode_image']
  props['target'] = options['pnode_addr'] if options['pnode_addr']

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnode_create(options['vnode_name'], props)
end

if options['f_vnetwork_create']
  errorcheck(ERR_VNETWORK,options['vnetwork_name'])

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnetwork_create(options['vnetwork_name'],options['vnetwork_address'])
end

if (options['f_viface_create'])
  errorcheck(ERR_VNODE,options['vnode_name'])

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.viface_create(options['vnode_name'], options['viface_name'])
end

if (options['f_vplatform_save'])
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  ret = cl.vplatform_info(options['vplatform_format'])
  File.open(options['vplatform_file'],'w') { |f| f.puts(ret) }
end

if (options['f_vplatform_load'])
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  if File.exists?(options['vplatform_file'])
    str = File.read(options['vplatform_file'])
  else
    puts "File '#{options['vplatform_file']}' not found !"
    exit 1
  end
  pp cl.vplatform_create(str,options['vplatform_format'])
end
