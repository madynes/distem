#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
# hack to allow running this script without installing the debian package
$:.unshift File.join(File.dirname(__FILE__), '..', 'debian/distem/usr/lib/ruby/vendor_ruby/1.8/x86_64-linux')

require 'distem'
require 'optparse'

USAGE="Usage: #{$0} [options]"

ERR_VNODE=0
ERR_VIFACE=1
ERR_VNETWORK=2
ERR_LIM_DIR=3

def errorcheck(errid,optvar,msg="")
  unless optvar
    case errid
      when ERR_VNODE
        errmsg="You have to specify the vnode (option --vnode)"
      when ERR_VIFACE
        errmsg="You have to specify the viface (option --viface)"
      when ERR_VNETWORK
        errmsg="You have to specify the vnetwork (option --vnetwork)"
      when ERR_LIM_DIR
        errmsg="You have to specify the direction (INPUT/OUTPUT) of the limitation (option -i or -o)"
      else
        errmsg = msg
    end
    puts errmsg
    exit
  end
end

options = {}

options['f_vnetwork_create'] = false
options['f_vroute_create'] = false
options['f_vroute_complete'] = false
options['f_vnode_attach'] = false
options['f_limitation_create'] = false
options['f_limitation_latency'] = false
options['f_limitation_bandwidth'] = false
options['f_vnetwork_list'] = false

options['vnode_name'] = false
options['viface_name'] = false
options['viface_address'] = false
options['vnetwork_name'] = false
options['vnetwork_address'] = false
options['vroute_srcnet'] = false
options['vroute_destnet'] = false
options['vroute_gateway'] = false 
options['lim_direction'] = false
options['lim_params'] = false
options['lim_latency'] = false
options['lim_bandwidth'] = false
options['daemon_addr'] = 'localhost'
options['daemon_port'] = 4567

optparse = OptionParser.new(USAGE) do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  opts.on( '-d', '--daemon ADDRESS', \
    'The address of the daemon [default: localhost]' ) do |h|
    options['daemon_addr'] = h
  end
  opts.on( '-p', '--port NUMBER', \
    'The port that the daemon is listening on [default: 4567]' ) do |p|
    options['daemon_port'] = p
  end
  opts.on( '-N', '--vnetwork NAME', \
    'The name of the Virtual Network' ) do |n|
    options['vnetwork_name'] = n
  end
  opts.on( '-n', '--vnode VNODE', \
    'The name of the Virtual Node' ) do |n|
    options['vnode_name'] = n
  end
  opts.on( '-I', '--viface VIFACE', \
    'The name of the Virtual Interface' ) do |i|
    options['viface_name'] = i
  end
  opts.on( '-c', '--create-vnetwork NAME,ADDRESS', Array, \
    'Create the VNetwork NAME with the ADDRESS (ip/mask or ip/prefix)' ) do |array|
    options['f_vnetwork_create'] = true
    options['vnetwork_name'] = array[0]
    options['vnetwork_address'] = array[1]
  end
  opts.on( '-r', '--create-vroute SRCNET,DESTNET,GATEWAY', Array, \
    'Create a VRoute between SRCNET and DESTNET (names) using the node GATEWAY (affect all the VNodes in the VNetwork SRCNET)' ) do |array|
    options['f_vroute_create'] = true
    options['vroute_srcnet'] = array[0]
    options['vroute_destnet'] = array[1]
    options['vroute_gateway'] = array[2]
  end
  opts.on( '-X', '--complete-vroute', \
    'Create every possible VRoute possible for each VNode' ) do 
    options['f_vroute_complete'] = true
  end
  opts.on( '-A', '--attach-viface [address]', \
    'Connect the Virtual Node to the Virtual Network with the Virtual Interface using an address or a network name' ) do |a| \
    options['f_vnode_attach'] = true
    options['viface_address'] = a || false
  end
  opts.on( '-i', '--input-limitation', \
    'Set an input limitation' ) do |i|
    options['lim_direction'] = 'INPUT'
  end
  opts.on( '-o', '--output-limitation', \
    'Set an output limitation' ) do |i|
    options['lim_direction'] = 'OUTPUT'
  end
  opts.on( '-L', '--create-limitation PARAMS',
    'Create a limitation on VIface of VNode, following a Direction  (option -i or -o) and with <PARAMS> (JSON)') do |p|
    options['f_limitation_create'] = true
    options['lim_params'] = p
  end
  opts.on( '-l', '--limit-latency VALUE', \
    'Create a latency limitation on VIface of VNode following a Direction (option -i or -o)' ) do |l|
    options['f_limitation_create'] = true
    options['f_limitation_latency'] = true
    options['lim_latency'] = l
  end
  opts.on( '-b', '--limit-bandwidth VALUE', \
    'Create a bandwidth limitation on VIface of VNode following a Direction (option -i or -o)' ) do |b|
    options['f_limitation_create'] = true
    options['f_limitation_bandwidth'] = true
    options['lim_bandwidth'] = b
  end
end

optparse.parse!

unless ARGV.length == 0
  puts USAGE
  exit
end

cl=false

if options['f_vnetwork_create']
  errorcheck(ERR_VNETWORK,options['vnetwork_name'])

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnetwork_create(options['vnetwork_name'],options['vnetwork_address'])
end

if options['f_vroute_create']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vroute_create(options['vroute_srcnet'],options['vroute_destnet'],options['vroute_gateway'])
end

if options['f_vroute_complete']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vroute_complete()
end

if options['f_vnode_attach']
  errorcheck(ERR_VNODE,options['vnode_name'])
  errorcheck(ERR_VIFACE,options['viface_name'])

  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl

  if options['f_limitation_create']
    plimit = {}

    if options['lim_direction']
      direction = options['lim_direction']
    else
      direction = 'FULLDUPLEX'
    end

    if options['lim_params']
      plimit = options['lim_params']
    else
      plimit[direction] = {}
      if options['f_limitation_latency']
        plimit[direction]['latency'] = { "delay" => options['lim_latency'] }
      end
      if options['f_limitation_bandwidth']
        plimit[direction]['bandwidth'] = { "rate" => options['lim_bandwidth'] }
      end
    end
  end

  params = {}
  params['limitation'] = plimit if plimit
  if options['vnetwork_name']
    params['vnetwork'] = options['vnetwork_name']
  elsif options['viface_address']
    params['address'] = options['viface_address']
  end
  pp cl.viface_attach(options['vnode_name'],options['viface_name'],params)
end

