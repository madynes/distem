#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
# hack to allow running this script without installing the debian package
$:.unshift File.join(File.dirname(__FILE__), '..', 'debian/distem/usr/lib/ruby/vendor_ruby/1.8/x86_64-linux')

require 'distem'
require 'optparse'
require 'pp'

USAGE="Usage: #{$0} [options]"

def errorcheck(errid,optvar,msg="")
  unless optvar
    puts msg
    exit
  end
end

options = {}
options['f_pnode'] = false
options['f_pnodes'] = false
options['f_vnode'] = false
options['f_vnodes'] = false
options['f_iface'] = false
options['f_vnetwork'] = false
options['f_vnetworks'] = false

options['pnode_name'] = false
options['vnode_name'] = false
options['viface_name'] = false
options['vnetwork_name'] = false
options['daemon_addr'] = 'localhost'
options['daemon_port'] = 4567

optparse = OptionParser.new(USAGE) do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  opts.on( '-d', '--daemon ADDRESS', \
    'The address of the daemon [default: localhost]' ) do |h|
    options['daemon_addr'] = h
  end
  opts.on( '-z', '--port NUMBER', \
    'The port that the daemon is listening on [default: 4567]' ) do |p|
    options['daemon_port'] = p
  end
  opts.on( '-P', '--pnodes', \
    'The list of the Physical Nodes' ) do 
    options['f_pnodes'] = true
  end
  opts.on( '-p', '--pnode PNODENAME', \
    'The description of the Physical Node' ) do |p|
    options['f_pnode'] = true
    options['pnode_name'] = p
  end
  opts.on( '-N', '--vnodes', \
    'The list of the Virtual Nodes' ) do 
    options['f_vnodes'] = true
  end
  opts.on( '-n', '--vnode VNODENAME', \
    'The description of the Virtual Node' ) do |n|
    options['f_vnode'] = true
    options['vnode_name'] = n
  end
  opts.on( '-R', '--vnetworks', \
    'The list of the Virtual Networks' ) do 
    options['f_vnetworks'] = true
  end
  opts.on( '-r', '--vnetwork VNETWORKNAME', \
    'The description of the Virtual Networks' ) do |n|
    options['f_vnetwork'] = true
    options['vnetwork_name'] = n
  end
  opts.on( '-i', '--viface VNODENAME,VIFACENAME', Array, \
    'The description of the Virtual Interface' ) do |array|
    options['f_viface'] = true
    options['vnode_name'] = array[0]
    options['viface_name'] = array[1]
  end
end

optparse.parse!

unless ARGV.length == 0
  puts USAGE
  exit
end

cl=nil

if options['f_pnodes']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.pnodes_info()
end

if options['f_pnode']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.pnode_info(options['pnode_name'])
end

if options['f_vnodes']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnodes_info()
end

if options['f_vnode']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnode_info(options['vnode_name'])
end

if options['f_vnetworks']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnetworks_info()
end

if options['f_vnetwork']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.vnetwork_info(options['vnetwork_name'])
end

if options['f_viface']
  cl = Distem::NetAPI::Client.new(options['daemon_addr'],options['daemon_port']) unless cl
  pp cl.viface_info(options['vnode_name'],options['viface_name'])
end
